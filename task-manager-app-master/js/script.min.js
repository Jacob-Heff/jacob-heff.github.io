// Task Manager App - Minified Version
class TaskManager{constructor(){this.tasks={backlog:[{id:1,title:'Implement CRUD (Create, Read, Update, and Delete) operations',label:'technical'},{id:2,title:'Design Todo App',label:'design'}],inProgress:[{id:3,title:'Implement the ability for users to add tasks using the mouse or keyboard',label:'frontend'},{id:4,title:'Implement the ability for users to view a specific subset of tasks',label:'frontend'},{id:5,title:'Use the useEffect state Hook to update the number of pending tasks',label:'technical'}],inReview:[{id:6,title:'Implement the ability for users to edit tasks',label:'frontend'},{id:7,title:'Implement the ability for users to delete tasks using the mouse or keyboard',label:'frontend'}],completed:[{id:8,title:'Create a basic App component structure and styling',label:'concept'},{id:9,title:'Investigate Framer-Motion for animations',label:'learning'}]};this.nextId=10;this.cache=new Map();this.filters={search:'',labels:['all'],statuses:['backlog','inProgress','inReview','completed']};this.currentWorkspace='default';this.workspacePasscode=null;this.isWorkspaceProtected=false;this.encryptionKey=null;this.sessionTimeout=30*60*1000;this.lastActivity=Date.now();this.securityLevel='medium';this.autoLockEnabled=true;this.init()}init(){this.initializeSecurity();this.loadFromCache();this.renderAllColumns();this.addEventListeners();this.setupModal();this.setupKeyboardShortcuts();this.setupSidebar();this.setupWorkspaceUI();this.initializeSidebarState();this.updateFilterCounts();this.setupPageLifecycle();this.startSecurityMonitoring()}addEventListeners(){document.querySelectorAll('.add-task-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const column=e.target.getAttribute('data-column');this.openTaskModal(column)})});document.addEventListener('click',(e)=>{if(e.target.classList.contains('edit-task')){const taskId=parseInt(e.target.getAttribute('data-task-id'));const column=e.target.getAttribute('data-column');this.editTask(taskId,column)}else if(e.target.classList.contains('delete-task')){const taskId=parseInt(e.target.getAttribute('data-task-id'));const column=e.target.getAttribute('data-column');this.deleteTask(taskId,column)}else if(e.target.classList.contains('move-task')){const taskId=parseInt(e.target.getAttribute('data-task-id'));const fromColumn=e.target.getAttribute('data-from-column');const toColumn=e.target.getAttribute('data-to-column');this.moveTask(taskId,fromColumn,toColumn)}else if(e.target.classList.contains('duplicate-task')){const taskId=parseInt(e.target.getAttribute('data-task-id'));const column=e.target.getAttribute('data-column');this.duplicateTask(taskId,column)}else if(e.target.classList.contains('task-card')){this.showTaskDetails(e.target)}});const closeModal=document.getElementById('closeModal');if(closeModal){closeModal.addEventListener('click',()=>{this.closeTaskModal()})}const taskForm=document.getElementById('taskForm');if(taskForm){taskForm.addEventListener('submit',(e)=>{e.preventDefault();this.handleTaskSubmit()})}const cancelBtn=document.getElementById('cancelBtn');if(cancelBtn){cancelBtn.addEventListener('click',()=>{this.closeTaskModal()})}window.addEventListener('click',(e)=>{const modal=document.getElementById('taskModal');if(modal&&e.target===modal){this.closeTaskModal()}});const sidebarToggle=document.getElementById('sidebarToggle');if(sidebarToggle){sidebarToggle.addEventListener('click',()=>{this.toggleSidebar()})}const floatingToggle=document.getElementById('floatingToggle');if(floatingToggle){floatingToggle.addEventListener('click',()=>{this.toggleSidebar()})}const searchInput=document.getElementById('searchInput');if(searchInput){searchInput.addEventListener('input',(e)=>{this.filters.search=e.target.value.toLowerCase();this.applyFilters()})}const clearSearchBtn=document.getElementById('clearSearchBtn');if(clearSearchBtn){clearSearchBtn.addEventListener('click',()=>{this.clearSearch()})}const filterCheckboxes=document.querySelectorAll('input[type="checkbox"][value]');filterCheckboxes.forEach(checkbox=>{checkbox.addEventListener('change',()=>{this.updateFilters()})});const resetFiltersBtn=document.getElementById('resetFiltersBtn');if(resetFiltersBtn){resetFiltersBtn.addEventListener('click',()=>{this.resetFilters()})}this.setupDragAndDrop()}setupKeyboardShortcuts(){document.addEventListener('keydown',(e)=>{if((e.ctrlKey||e.metaKey)&&e.key==='n'){e.preventDefault();this.openTaskModal('backlog')}if(e.key==='Escape'){this.closeTaskModal()}if((e.ctrlKey||e.metaKey)&&e.key==='f'){e.preventDefault();const searchInput=document.getElementById('searchInput');if(searchInput){searchInput.focus()}}})}setupDragAndDrop(){document.addEventListener('dragstart',(e)=>{if(e.target.classList.contains('task-card')){e.dataTransfer.setData('text/plain',e.target.dataset.taskId);e.dataTransfer.effectAllowed='move';e.target.classList.add('dragging')}});document.addEventListener('dragend',(e)=>{if(e.target.classList.contains('task-card')){e.target.classList.remove('dragging')}});document.addEventListener('dragover',(e)=>{e.preventDefault();const column=e.target.closest('.board-column');if(column){column.classList.add('drag-over')}});document.addEventListener('dragleave',(e)=>{const column=e.target.closest('.board-column');if(column&&!column.contains(e.relatedTarget)){column.classList.remove('drag-over')}});document.addEventListener('drop',(e)=>{e.preventDefault();const column=e.target.closest('.board-column');if(column){column.classList.remove('drag-over');const taskId=parseInt(e.dataTransfer.getData('text/plain'));const toColumn=column.dataset.columnKey;const taskCard=document.querySelector(`[data-task-id="${taskId}"]`);if(taskCard){const fromColumn=taskCard.closest('.board-column').dataset.columnKey;if(fromColumn!==toColumn){this.moveTask(taskId,fromColumn,toColumn)}}}})}setupModal(){if(document.getElementById('taskModal')){return}const modalHTML=`<div class="modal-overlay" id="taskModal" role="dialog" aria-labelledby="modalTitle" aria-modal="true"><div class="modal-dialog"><div class="modal-header"><h2 id="modalTitle">Add New Task</h2><button class="modal-close" id="closeModal" aria-label="Close dialog">&times;</button></div><div class="modal-body"><form id="taskForm"><div class="form-group"><label for="taskTitle">Task Title</label><input type="text" id="taskTitle" name="title" required maxlength="200" aria-describedby="titleHelp"><small id="titleHelp" class="form-text">Enter a descriptive title for your task</small></div><div class="form-group"><label for="taskLabel">Label</label><select id="taskLabel" name="label" required aria-describedby="labelHelp"><option value="">Select a label</option><option value="concept">Concept</option><option value="technical">Technical</option><option value="frontend">Frontend</option><option value="design">Design</option><option value="learning">Learning</option></select><small id="labelHelp" class="form-text">Choose a category that best describes this task</small></div></form></div><div class="modal-footer"><button type="button" class="modal-btn modal-btn-secondary" id="cancelBtn">Cancel</button><button type="submit" form="taskForm" class="modal-btn modal-btn-primary" id="submitBtn">Add Task</button></div></div></div>`;document.body.insertAdjacentHTML('beforeend',modalHTML);this.setupCustomModals()}setupCustomModals(){const confirmModal=document.getElementById('confirmModal');const alertModal=document.getElementById('alertModal');if(confirmModal){const confirmClose=document.getElementById('confirmModalClose');const confirmCancel=document.getElementById('confirmModalCancel');const confirmConfirm=document.getElementById('confirmModalConfirm');if(confirmClose){confirmClose.addEventListener('click',()=>this.closeConfirmModal())}if(confirmCancel){confirmCancel.addEventListener('click',()=>this.closeConfirmModal())}confirmModal.addEventListener('click',(e)=>{if(e.target===confirmModal){this.closeConfirmModal()}});if(confirmConfirm){this.confirmCallback=null;confirmConfirm.addEventListener('click',()=>{if(this.confirmCallback){this.confirmCallback()}this.closeConfirmModal()})}}if(alertModal){const alertClose=document.getElementById('alertModalClose');const alertOk=document.getElementById('alertModalOk');if(alertClose){alertClose.addEventListener('click',()=>this.closeAlertModal())}if(alertOk){alertOk.addEventListener('click',()=>this.closeAlertModal())}alertModal.addEventListener('click',(e)=>{if(e.target===alertModal){this.closeAlertModal()}})}}showConfirm(title,message,onConfirm,onCancel=null){const modal=document.getElementById('confirmModal');const titleEl=document.getElementById('confirmModalTitle');const messageEl=document.getElementById('confirmModalMessage');if(modal&&titleEl&&messageEl){titleEl.textContent=title;messageEl.textContent=message;this.confirmCallback=onConfirm;this.cancelCallback=onCancel;modal.style.display='block';const confirmBtn=document.getElementById('confirmModalConfirm');if(confirmBtn){confirmBtn.focus()}}}showAlert(title,message,onOk=null){const modal=document.getElementById('alertModal');const titleEl=document.getElementById('alertModalTitle');const messageEl=document.getElementById('alertModalMessage');if(modal&&titleEl&&messageEl){titleEl.textContent=title;messageEl.textContent=message;this.alertCallback=onOk;modal.style.display='block';const okBtn=document.getElementById('alertModalOk');if(okBtn){okBtn.focus()}}}closeConfirmModal(){const modal=document.getElementById('confirmModal');if(modal){modal.style.display='none'}if(this.cancelCallback){this.cancelCallback()}this.confirmCallback=null;this.cancelCallback=null}closeAlertModal(){const modal=document.getElementById('alertModal');if(modal){modal.style.display='none'}if(this.alertCallback){this.alertCallback()}this.alertCallback=null}renderColumn(columnKey){const columnElement=document.querySelector(`[data-column-key="${columnKey}"]`);if(!columnElement){return}const tasksContainer=columnElement.querySelector('.tasks-container');const tasks=this.tasks[columnKey];if(!tasksContainer){return}const countElement=columnElement.querySelector('.task-count');if(countElement){countElement.textContent=`(${tasks.length})`}tasksContainer.innerHTML=tasks.map(task=>`<div class="task-card" data-task-id="${task.id}" draggable="true"><div class="task-title">${task.title}</div><div class="task-labels"><span class="label ${task.label}">${this.capitalizeFirst(task.label)}</span></div><div class="task-actions"><button class="task-action-btn edit-task" data-task-id="${task.id}" data-column="${columnKey}" title="Edit Task" aria-label="Edit task">✏️</button><button class="task-action-btn duplicate-task" data-task-id="${task.id}" data-column="${columnKey}" title="Duplicate Task" aria-label="Duplicate task">📋</button><button class="task-action-btn delete-task" data-task-id="${task.id}" data-column="${columnKey}" title="Delete Task" aria-label="Delete task">🗑️</button>${this.getMoveButtons(columnKey,task.id)}</div></div>`).join('');requestAnimationFrame(()=>{const isScrollable=tasksContainer.scrollHeight>tasksContainer.clientHeight;if(isScrollable){tasksContainer.classList.add('scrollable')}else{tasksContainer.classList.remove('scrollable')}})}getMoveButtons(currentColumn,taskId){const columns=['backlog','inProgress','inReview','completed'];return columns.filter(col=>col!==currentColumn).map(col=>{const displayName=col==='inProgress'?'In Progress':col==='inReview'?'In Review':this.capitalizeFirst(col);return`<button class="task-action-btn move-task" data-task-id="${taskId}" data-from-column="${currentColumn}" data-to-column="${col}" title="Move to ${displayName}" aria-label="Move to ${displayName}">→</button>`}).join('')}renderAllColumns(){Object.keys(this.tasks).forEach(columnKey=>{this.renderColumn(columnKey)});this.updateFilterCounts();this.applyFilters()}openTaskModal(column,task=null){const modal=document.getElementById('taskModal');if(!modal){this.setupModal();return setTimeout(()=>this.openTaskModal(column,task),100)}const modalTitle=document.getElementById('modalTitle');const taskTitleInput=document.getElementById('taskTitle');const taskLabelSelect=document.getElementById('taskLabel');const submitBtn=document.getElementById('submitBtn');if(task){modalTitle.textContent='Edit Task';taskTitleInput.value=task.title;taskLabelSelect.value=task.label;submitBtn.textContent='Update Task';modal.dataset.editingTask=task.id;modal.dataset.editingColumn=column}else{modalTitle.textContent='Add New Task';taskTitleInput.value='';taskLabelSelect.value='';submitBtn.textContent='Add Task';delete modal.dataset.editingTask;delete modal.dataset.editingColumn;modal.dataset.targetColumn=column}modal.style.display='block';taskTitleInput.focus()}closeTaskModal(){const modal=document.getElementById('taskModal');if(modal){modal.style.display='none'}}handleTaskSubmit(){const modal=document.getElementById('taskModal');const title=document.getElementById('taskTitle').value.trim();const label=document.getElementById('taskLabel').value;if(!title||!label){this.showAlert('Validation Error','Please fill in all required fields.');return}const taskData={title,label};if(modal.dataset.editingTask){const taskId=parseInt(modal.dataset.editingTask);const column=modal.dataset.editingColumn;this.updateTask(taskId,column,taskData)}else{const column=modal.dataset.targetColumn;this.addTask(column,taskData)}this.closeTaskModal()}addTask(column,taskData){const newTask={id:this.nextId++,...taskData};this.tasks[column].push(newTask);this.renderColumn(column);this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification(`Task added to ${this.capitalizeFirst(column)}!`)}updateTask(taskId,column,updates){const taskIndex=this.tasks[column].findIndex(task=>task.id===taskId);if(taskIndex!==-1){this.tasks[column][taskIndex]={...this.tasks[column][taskIndex],...updates};this.renderColumn(column);this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification('Task updated successfully!')}}editTask(taskId,column){const task=this.tasks[column].find(t=>t.id===taskId);if(task){this.openTaskModal(column,task)}}deleteTask(taskId,column){this.showConfirm('Delete Task','Are you sure you want to delete this task? This action cannot be undone.',()=>{const taskIndex=this.tasks[column].findIndex(task=>task.id===taskId);if(taskIndex!==-1){this.tasks[column].splice(taskIndex,1);this.renderColumn(column);this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification('Task deleted successfully!')}})}duplicateTask(taskId,column){const task=this.tasks[column].find(t=>t.id===taskId);if(task){const duplicatedTask={...task,id:this.nextId++,title:`${task.title} (Copy)`};this.tasks[column].push(duplicatedTask);this.renderColumn(column);this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification('Task duplicated successfully!')}}moveTask(taskId,fromColumn,toColumn){const taskIndex=this.tasks[fromColumn].findIndex(task=>task.id===taskId);if(taskIndex!==-1){const task=this.tasks[fromColumn].splice(taskIndex,1)[0];this.tasks[toColumn].push(task);this.renderColumn(fromColumn);this.renderColumn(toColumn);this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification(`Task moved to ${this.capitalizeFirst(toColumn)}!`)}}capitalizeFirst(str){return str.charAt(0).toUpperCase()+str.slice(1)}saveToCache(){try{const data={tasks:this.tasks,nextId:this.nextId,currentWorkspace:this.currentWorkspace,timestamp:Date.now()};this.cache.set(this.currentWorkspace,data);const compressed=this.compressData(data);localStorage.setItem(`taskManager_${this.currentWorkspace}`,compressed)}catch(error){console.warn('Failed to save to cache:',error)}}loadFromCache(){try{const cached=localStorage.getItem(`taskManager_${this.currentWorkspace}`);if(cached){const data=this.decompressData(cached);if(data&&data.tasks){this.tasks=data.tasks;this.nextId=data.nextId||10;this.cache.set(this.currentWorkspace,data)}}}catch(error){console.warn('Failed to load from cache:',error)}}compressData(data){return btoa(JSON.stringify(data))}decompressData(compressed){try{return JSON.parse(atob(compressed))}catch{return null}}exportTasks(){const data={tasks:this.tasks,nextId:this.nextId,workspace:this.currentWorkspace,exportedAt:new Date().toISOString()};const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const link=document.createElement('a');link.href=url;link.download=`task-manager-export-${this.currentWorkspace}-${new Date().toISOString().split('T')[0]}.json`;document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);this.showNotification('Tasks exported successfully!')}importTasks(event){const file=event.target.files[0];if(!file){return}const reader=new FileReader();reader.onload=(e)=>{try{const data=JSON.parse(e.target.result);if(data.tasks&&typeof data.tasks==='object'){this.showConfirm('Import Tasks','This will replace all current tasks. Are you sure you want to continue?',()=>{this.tasks=data.tasks;this.nextId=data.nextId||this.nextId;this.renderAllColumns();this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification('Tasks imported successfully!')});event.target.value=''}else{this.showAlert('Import Error','Invalid file format. Please select a valid task export file.')}}catch(error){this.showAlert('Import Error','Failed to parse the file. Please check the file format and try again.')}};reader.readAsText(file)}clearAllTasks(){this.showConfirm('Clear All Tasks','Are you sure you want to delete all tasks? This action cannot be undone.',()=>{this.tasks={backlog:[],inProgress:[],inReview:[],completed:[]};this.renderAllColumns();this.updateFilterCounts();this.applyFilters();this.saveToCache();this.showNotification('All tasks cleared!')})}updateFilters(){const labelCheckboxes=document.querySelectorAll('input[type="checkbox"][value]:not([id^="status"])');const statusCheckboxes=document.querySelectorAll('input[type="checkbox"][id^="status"]');this.filters.labels=Array.from(labelCheckboxes).filter(cb=>cb.checked).map(cb=>cb.value);this.filters.statuses=Array.from(statusCheckboxes).filter(cb=>cb.checked).map(cb=>cb.value);this.applyFilters()}applyFilters(){Object.keys(this.tasks).forEach(columnKey=>{const columnElement=document.querySelector(`[data-column-key="${columnKey}"]`);if(!columnElement)return;const isStatusVisible=this.filters.statuses.includes(columnKey);columnElement.style.display=isStatusVisible?'flex':'none';if(!isStatusVisible)return;const tasksContainer=columnElement.querySelector('.tasks-container');const taskCards=tasksContainer.querySelectorAll('.task-card');taskCards.forEach(card=>{const taskId=parseInt(card.dataset.taskId);const task=this.tasks[columnKey].find(t=>t.id===taskId);if(!task){card.style.display='none';return}const matchesSearch=!this.filters.search||task.title.toLowerCase().includes(this.filters.search);const matchesLabel=this.filters.labels.includes('all')||this.filters.labels.includes(task.label);card.style.display=matchesSearch&&matchesLabel?'block':'none'})})}updateFilterCounts(){const counts={all:0,technical:0,design:0,frontend:0,concept:0,learning:0};const statusCounts={backlog:0,inProgress:0,inReview:0,completed:0};Object.keys(this.tasks).forEach(columnKey=>{const tasks=this.tasks[columnKey];statusCounts[columnKey]=tasks.length;tasks.forEach(task=>{counts.all++;if(counts[task.label]!==undefined){counts[task.label]++}})});Object.keys(counts).forEach(label=>{const countElement=document.getElementById(`count${this.capitalizeFirst(label)}`);if(countElement){countElement.textContent=`(${counts[label]})`}});Object.keys(statusCounts).forEach(status=>{const countElement=document.getElementById(`statusCount${this.capitalizeFirst(status)}`);if(countElement){countElement.textContent=`(${statusCounts[status]})`}})}clearSearch(){const searchInput=document.getElementById('searchInput');if(searchInput){searchInput.value='';this.filters.search='';this.applyFilters()}}resetFilters(){const checkboxes=document.querySelectorAll('input[type="checkbox"][value]');checkboxes.forEach(checkbox=>{if(checkbox.value==='all'||checkbox.id.startsWith('status')){checkbox.checked=true}else{checkbox.checked=false}});this.updateFilters();this.clearSearch()}showTaskDetails(taskCard){const taskId=parseInt(taskCard.dataset.taskId);const column=taskCard.closest('.board-column').dataset.columnKey;const task=this.tasks[column].find(t=>t.id===taskId);if(task){this.showAlert('Task Details',`Title: ${task.title}\nLabel: ${this.capitalizeFirst(task.label)}\nStatus: ${this.capitalizeFirst(column)}`)}}showNotification(message){const notification=document.createElement('div');notification.className='notification';notification.textContent=message;notification.setAttribute('role','alert');notification.setAttribute('aria-live','polite');document.body.appendChild(notification);setTimeout(()=>{notification.classList.add('show')},100);setTimeout(()=>{notification.classList.remove('show');setTimeout(()=>{if(notification.parentNode){document.body.removeChild(notification)}},300)},3000)}setupSidebar(){this.setupSidebarButtons()}setupSidebarButtons(){const exportBtn=document.getElementById('sidebarExportBtn');const importBtn=document.getElementById('sidebarImportBtn');const importInput=document.getElementById('sidebarImportInput');const clearAllBtn=document.getElementById('sidebarClearAllBtn');if(exportBtn){exportBtn.addEventListener('click',()=>this.exportTasks())}if(importBtn&&importInput){importBtn.addEventListener('click',()=>importInput.click());importInput.addEventListener('change',(e)=>this.importTasks(e))}if(clearAllBtn){clearAllBtn.addEventListener('click',()=>this.clearAllTasks())}}setupWorkspaceUI(){const createWorkspaceBtn=document.getElementById('createWorkspaceBtn');const protectWorkspaceBtn=document.getElementById('protectWorkspaceBtn');const shareWorkspaceBtn=document.getElementById('shareWorkspaceBtn');if(createWorkspaceBtn){createWorkspaceBtn.addEventListener('click',()=>this.createNewWorkspace())}if(protectWorkspaceBtn){protectWorkspaceBtn.addEventListener('click',()=>this.protectWorkspace())}if(shareWorkspaceBtn){shareWorkspaceBtn.addEventListener('click',()=>this.shareWorkspace())}this.updateWorkspaceDisplay()}updateWorkspaceDisplay(){const workspaceNameEl=document.getElementById('currentWorkspaceName');const securityLevelEl=document.getElementById('workspaceSecurityLevel');if(workspaceNameEl){workspaceNameEl.textContent=this.currentWorkspace}if(securityLevelEl){const securityIcons={low:'🔓',medium:'🔒',high:'🔐'};const securityLabels={low:'Low',medium:'Medium',high:'High'};securityLevelEl.textContent=`${securityIcons[this.securityLevel]} ${securityLabels[this.securityLevel]}`;securityLevelEl.className=`security-badge ${this.securityLevel}`}}createNewWorkspace(){this.showConfirm('Create New Workspace','This will save current tasks and create a new workspace. Continue?',()=>{this.saveToCache();const workspaceName=`workspace-${Date.now()}`;this.currentWorkspace=workspaceName;this.tasks={backlog:[],inProgress:[],inReview:[],completed:[]};this.nextId=1;this.isWorkspaceProtected=false;this.workspacePasscode=null;this.securityLevel='medium';this.renderAllColumns();this.updateFilterCounts();this.updateWorkspaceDisplay();this.showNotification(`New workspace "${workspaceName}" created!`)})}protectWorkspace(){if(this.isWorkspaceProtected){this.showAlert('Workspace Protected','This workspace is already protected.');return}const passcode=prompt('Enter a passcode to protect this workspace:');if(passcode&&passcode.length>=4){this.workspacePasscode=this.hashString(passcode);this.isWorkspaceProtected=true;this.securityLevel='high';this.updateWorkspaceDisplay();this.saveToCache();this.showNotification('Workspace protection enabled!')}else if(passcode!==null){this.showAlert('Invalid Passcode','Passcode must be at least 4 characters long.')}}shareWorkspace(){const url=new URL(window.location);url.searchParams.set('workspace',this.currentWorkspace);if(this.isWorkspaceProtected){url.searchParams.set('protected','true')}navigator.clipboard.writeText(url.toString()).then(()=>{this.showNotification('Workspace URL copied to clipboard!')}).catch(()=>{this.showAlert('Share Workspace',`Share this URL:\n${url.toString()}`)})}hashString(str){let hash=0;for(let i=0;i<str.length;i++){const char=str.charCodeAt(i);hash=((hash<<5)-hash)+char;hash=hash&hash}return hash.toString()}initializeSecurity(){this.setupSecuritySettings();this.loadWorkspaceFromURL()}setupSecuritySettings(){const urlParams=new URLSearchParams(window.location.search);const workspaceParam=urlParams.get('workspace');const protectedParam=urlParams.get('protected');if(workspaceParam){this.currentWorkspace=workspaceParam;if(protectedParam==='true'){this.promptForPasscode()}}}loadWorkspaceFromURL(){const urlParams=new URLSearchParams(window.location.search);const workspace=urlParams.get('workspace');if(workspace){this.currentWorkspace=workspace;this.loadFromCache()}}promptForPasscode(){const passcode=prompt('Enter workspace passcode:');if(passcode){const hashedInput=this.hashString(passcode);const storedData=localStorage.getItem(`taskManager_${this.currentWorkspace}`);if(storedData){try{const data=this.decompressData(storedData);if(data&&data.workspacePasscode===hashedInput){this.workspacePasscode=hashedInput;this.isWorkspaceProtected=true;this.securityLevel='high';this.showNotification('Workspace unlocked!')}else{this.showAlert('Access Denied','Incorrect passcode.');this.currentWorkspace='default'}}catch{this.showAlert('Access Denied','Unable to verify passcode.');this.currentWorkspace='default'}}else{this.showAlert('Access Denied','Workspace not found.');this.currentWorkspace='default'}}else{this.currentWorkspace='default'}}toggleSidebar(){const sidebar=document.querySelector('.sidebar');const floatingToggle=document.getElementById('floatingToggle');const mainContent=document.querySelector('.main-content');if(sidebar.classList.contains('collapsed')){sidebar.classList.remove('collapsed');floatingToggle.style.display='none';localStorage.setItem('sidebarCollapsed','false')}else{sidebar.classList.add('collapsed');floatingToggle.style.display='block';localStorage.setItem('sidebarCollapsed','true')}}initializeSidebarState(){const isCollapsed=localStorage.getItem('sidebarCollapsed')==='true';if(isCollapsed){const sidebar=document.querySelector('.sidebar');const floatingToggle=document.getElementById('floatingToggle');sidebar.classList.add('collapsed');floatingToggle.style.display='block'}}setupPageLifecycle(){document.addEventListener('visibilitychange',()=>{if(document.hidden){this.saveToCache()}else{this.lastActivity=Date.now()}});window.addEventListener('beforeunload',()=>{this.saveToCache()})}startSecurityMonitoring(){if(!this.autoLockEnabled||this.securityLevel==='low'){return}setInterval(()=>{const now=Date.now();const timeSinceActivity=now-this.lastActivity;if(timeSinceActivity>this.sessionTimeout&&this.isWorkspaceProtected){this.lockWorkspace()}},60000)}lockWorkspace(){this.saveToCache();this.showAlert('Session Expired','Your session has expired for security. Please refresh the page.',()=>{window.location.reload()})}initializeSecurity(){this.trackActivity();this.loadWorkspaceFromURL()}trackActivity(){document.addEventListener('mousedown',()=>{this.lastActivity=Date.now()});document.addEventListener('keydown',()=>{this.lastActivity=Date.now()});document.addEventListener('scroll',()=>{this.lastActivity=Date.now()})}}const taskManager=new TaskManager();
